#!/bin/bash

# distrib=$(lsb_release -i | cut -d : -f 2)
distrib=""

serverUrl="http://www-info.iutv.univ-paris13.fr/~gauthier/"
serverPOST="$serverUrl/eval.php"
# serverPOST="http://192.168.1.24/server/"

packages="zenity wget ssh sshpass"
projectName="example_TP1.mar"
requestName="exempleTP1_requetes.txt"
idSsh="id_rsa_marionnet"
scripts="marionnet_getVar marionnet_list marionnet_ssh"
file="$projectName $requestName $idSsh"

name=""
firstName=""
idExam=""
choice=""

declare -A dataRequest

function installDep() {
    echo "Searching for dependance ..."
    for p in $packages; do
        res=$(command -v $p | wc -l)
        if [[ $res -eq 1 ]]; then
            echo "Package $p found"
        else
            echo "Installing $p ..."
            sudo apt install $p
        fi
    done
}

function downloadScript() {
    if [[ ! -d script ]]; then
        mkdir script
        echo "script/ created"
    fi

    for sc in $scripts; do
        if [[ ! -f script/$sc ]]; then
            echo "Downloading $sc ..."
            cd script
            wget -nv $serverUrl/$sc
            chmod +x $sc
            cd ..
        else
            echo "$sc already exist"
        fi
    done
}

function input() {
    while [[ "A$firstName" = "A" ]]; do
        read -p "Enter your first name : " firstName
    done
    while [[ "A$name" = "A" ]]; do
        read -p "Enter your name : " name
    done
    while [[ "A$idExam" = "A" ]]; do
        read -p "Enter your exam id : " idExam
    done
}

function verifDeamon() {
    res=$(ps aux | grep marionnet | grep daemon.native | wc -l)
    if [[ $res -eq 1 ]]; then
        echo "Marionnet daemon is already running"
    else
        sudo /etc/init.d/marionnet-daemon start
        echo "Marionnet daemon started"
    fi
}

function getMarionetFile() {
    for f in $file; do
        if [[ ! -f $f ]]; then
            echo "Downloading $f file ..."
            wget -nv $serverUrl/$f
        fi
    done
    
    if [[ -f $projectName ]]; then
        res=$(ps aux | grep marionnet | grep $projectName | wc -l)
        if [[ $res -eq 0 ]]; then 
            marionnet $projectName 2> /dev/null &
            echo "Marionnet started"
        else
            echo "Marionnet already running"
        fi
    else
        echo "Marionnet project does not exist"
        exit 1
    fi
    
    if [[ -f $idSsh ]]; then
        res=$(ls -l $idSsh | cut -d ' ' -f 1)
        if [[ $res != "-rw-------" ]]; then
            echo "Change chmod to 600"
            chmod 600 $idSsh
        fi
    fi
}

function parseRequest() {
    echo "Parsing request ..."
    nbLine=$(cat $requestName | grep '^[^#]' | wc -l)

    for i in $(seq 1 $nbLine); do
        for j in {1..5}; do
            dataRequest[$i,$j]=$(cat $requestName | grep '^[^#]' | sed -n "${i}p" | cut -d ';' -f $j)
        done
    done

    echo "$nbLine request found"
}

function parseCable() {
    local pName=$(echo $projectName | cut -d . -f 1)
    local seenD=0
    local seenC=0
    local patternD='DIRECT CABLE EDGES'
    local patternC='CROSSOVER/SERIAL CABLE EDGES'
    local char=""
    
    echo "Parsing cable ..."

    cable=$(cat /tmp/marionnet-*.dir/example_TP1/tmp/sketch.dot | while read line ; do
        if [[ $(echo $line) == "$patternD" ]]; then
            seenD=1;seenC=0
        elif [[ $(echo $line) == "$patternC" ]]; then
            seenD=0;seenC=1
        fi

        if [[ $seenD -eq 1 ]]; then
            char='direct'
        elif [[ $seenC -eq 1 ]]; then
            char='cross'
        fi

        line=$(echo $line | grep '^[^:]*:img:c -> [^:]*:img:c')
        echo $line | sed -e "s/^\([^:]*\):img:c -> \([^:]*\):img:c .*\">\([^<]*\).*$/$char \3 \1 \2;/" | tr -d '\n'
    done
    )
}

function formatJson() {
    send="{\"data\":["
    for i in $(seq 1 $(( nbLine-1 ))); do
        send="$send\"${data[$i]}\","
    done
    send="$send\"${data[$nbLine]}\"],\"cable\":\"$cable\"}"
}

# test_presence <machine>
function test_presence() {
    if [[ "A$1" != "A" ]]; then
        script/marionnet_list | grep -o "$1" > /dev/null && echo ok
    fi
}

# adresseIP <machine> [interface]
function adresseIP() {
    if [[ "A$1" != "A" ]]; then
        local eth=$([[ "A$2" != "A" ]] && echo $2 || echo eth0)
        script/marionnet_ssh $1 /sbin/ifconfig $eth | grep 'inet ' | awk '{print $2}' | cut -d : -f 2
    fi
}

# getMask <machine> [interface]
function getMask() {
    if [[ "A$1" != "A" ]]; then
        local eth=$([[ "A$2" != "A" ]] && echo $2 || echo eth0)
        script/marionnet_ssh $1 /sbin/ifconfig eth0 | grep 'Mask:' | awk '{print $4}' | cut -d : -f 2
    fi
}

# getRoute <machine> <route>
function getRoute() {
    if [[ "A$1" != "A" ]] && [[ "A$2" != "A" ]]; then
        local route=$([[ "$2" = "default" ]] && echo '0.0.0.0' || echo $2)
        local count=$(script/marionnet_ssh $1 route -n | grep "^$route" | wc -l)
        [[ $count -eq 1 ]] && script/marionnet_ssh $1 route -n | grep "^$route"
    fi
}

# getNet <machine> [interface]
function getNet() {
    if [[ "A$1" != "A" ]]; then
        local eth=$([[ "A$2" != "A" ]] && echo $2 || echo eth0)
        script/marionnet_ssh $1 route -n | grep "U[^G] .* $eth$" | awk '{print $1}'
    fi
}

# pingMachine <machine1> <machine2> [interface]
function pingMachine() {
    if [[ "A$1" != "A" ]] && [[ "A$2" != "A" ]]; then
        local eth=$([[ "A$3" != "A" ]] && echo $3 || echo eth0)
        local ip=$(adresseIP $2 $eth)
        script/marionnet_ssh $1 ping -c 1 -w 1 $ip &> /dev/null && echo ok
    fi
}

# checkIP <machine> [interface]
function checkIP() {
    if [[ "A$1" != "A" ]]; then
        local eth=$([[ "A$2" != "A" ]] && echo $2 || echo eth0)
        local mask=$(getMask $1 $eth)
        local ip=$(adresseIP $1 $eth)
        local net=$(getNet $1 $eth)

        # echo $1 $2 $eth $mask $ip $net

        local octMask=$(echo $mask | cut -d . -f 1)
        local octIP=$(echo $ip | cut -d . -f 1)
        local res=$(($octMask & $octIP))

        for i in {2..4}; do
            octMask=$(echo $mask | cut -d . -f $i)
            octIP=$(echo $ip | cut -d . -f $i)
            res="$res.$(($octMask & $octIP))"
        done

        [[ "$res" = "$net" ]] && echo ok
    fi
}

function evaluation() {
    echo "Evaluation in progress ..."
    parseRequest
    parseCable
    
    for i in $(seq 1 $nbLine); do
        echo "Getting data $i/$nbLine ..."
        if [[ "A${dataRequest[$i,2]}" != "A" ]]; then
            data[$i]=$(script/marionnet_ssh ${dataRequest[$i,2]} ${dataRequest[$i,3]})
        else
            data[$i]=$(${dataRequest[$i,3]}) # si pas de machine précisé -> exécute la commande en local
            # echo ${dataRequest[$i,3]}
            # echo ${data[$i]}
        fi
    done
    
    formatJson
    curl -H "Content-Type: application/json" -X POST -d "$send" $serverPOST
}

function examMode() {
    echo "exam mode"
}

function loop() {
    while [[ $choice != "n" ]]; do
        choice=""
        while [[ "A$choice" = "A" ]] || [[ $choice != "y" ]] && [[ $choice != "n" ]]; do
            read -p "Would you like to be evaluated (y/n) : " choice
        done
        if [[ $choice = "y" ]]; then
            res=$(ps aux | grep marionnet | grep $projectName | wc -l)
            if [[ $res -eq 1 ]]; then 
                evaluation
            else 
                echo "Marionnet not launch"
                exit 1
            fi
        else
            echo "Good bye"
        fi
    done
}

installDep
downloadScript
verifDeamon
# input
getMarionetFile
loop
