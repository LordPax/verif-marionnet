#!/bin/bash

# distrib=$(lsb_release -i | cut -d : -f 2)
distrib=""

packages="zenity wget ssh"
urlProjectFile="http://www-info.iutv.univ-paris13.fr/~gauthier/example_TP1.mar"
urlRequestFile="http://www-info.iutv.univ-paris13.fr/~gauthier/exempleTP1_requetes.txt"
urlSsh="http://www-info.iutv.univ-paris13.fr/~gauthier/id_rsa_marionnet"
serverUrl="localhost"

scripts="http://www-info.iutv.univ-paris13.fr/~gauthier/marionnet_getVar http://www-info.iutv.univ-paris13.fr/~gauthier/marionnet_list http://www-info.iutv.univ-paris13.fr/~gauthier/marionnet_ssh"

name=""
firstName=""
idExam=""
choice=""

declare -A dataRequest

function installDep() {
    echo "Searching for dependance ..."
    for p in $packages; do
        res=$(command -v $p | wc -l)
        if [[ $res -eq 1 ]]; then
            echo "Package $p found"
        else
            echo "Installing $p ..."
            sudo apt install $p
        fi
    done
}

function downloadScript() {
    if [[ ! -d script ]]; then
        mkdir script
        echo "script/ created"
    fi
    local name=""
    for sc in $scripts; do
        name=$(echo $sc | grep -o "[^/]*$" )
        if [[ ! -f script/$name ]]; then
            echo "Downloading $name in script/ ..."
            cd script
            wget -nv $sc
            chmod +x $name
            cd ..
        else
            echo "$name already exist"
        fi
    done
}

function input() {
    while [[ "A$firstName" = "A" ]]; do
        read -p "Enter your first name : " firstName
    done
    while [[ "A$name" = "A" ]]; do
        read -p "Enter your name : " name
    done
    while [[ "A$idExam" = "A" ]]; do
        read -p "Enter your exam id : " idExam
    done
}

function verifDeamon() {
    res=$(ps aux | grep marionnet | grep daemon.native | wc -l)
    if [[ $res -eq 1 ]]; then
        echo "Marionnet daemon is already running"
    else
        sudo /etc/init.d/marionnet-daemon start
        echo "Marionnet daemon started"
    fi
}

function getMarionetFile() {
    projectName=$(echo $urlProjectFile | grep -o "[^/]*$" )
    requestName=$(echo $urlRequestFile | grep -o "[^/]*$" )

    if [[ ! -f $projectName ]]; then
        echo "Downloading project file ..."
        wget -nv $urlProjectFile
    fi

    if [[ ! -f $requestName ]]; then
        echo "Downloading request file ..."
        wget -nv $urlRequestFile
    fi
    
    if [[ -f $projectName ]]; then
        res=$(ps aux | grep marionnet | grep $projectName | wc -l)
        if [[ $res -eq 0 ]]; then 
            marionnet $projectName &
            echo "Marionnet started"
        else
            echo "Marionnet already running"
        fi
    else
        echo "Marionnet project does not exist"
        exit 1
    fi
}

function parseRequest() {
    echo "Parsing request ..."
    nbLine=$(cat $requestName | grep '^[^#]' | wc -l)

    for i in $(seq 1 $nbLine); do
        for j in {1..5}; do
            dataRequest[$i,$j]=$(cat $requestName | grep '^[^#]' | sed -n "${i}p" | cut -d ';' -f $j)
        done
        # dataRequest[$i]=$(cat $requestName | grep '^[^#]' | sed -n "${i}p")
    done
    
    local pName=$(echo $projectName | cut -d . -f 1)
    cable=$(grep '^[^:]*:img:c -> [^:]*:img:c' /tmp/marionnet-*.dir/$pName/tmp/sketch.dot | sed -e 's/^\([^:]*\):img:c -> \([^:]*\):img:c .*$/\1 - \2/' | tr -d '\n')

    echo "$nbLine request found"
}

function evaluation() {
    echo "Evaluation in progress ..."
    parseRequest
    
    for i in $(seq 1 $nbLine); do
        # echo "${dataRequest[$i,1]} : $(script/marionnet_ssh ${dataRequest[$i,2]} ${dataRequest[$i,3]} | grep -o ${dataRequest[$i,4]})"
        data[$i]="${dataRequest[$i,1]} : $(script/marionnet_ssh ${dataRequest[$i,2]} ${dataRequest[$i,3]} | sed -n '4p')"
        echo ${data[$i]}
    done
    
    sendData
}

function sendData() {
    send="{\"data\":["
    
    for i in $(seq 1 $(( nbLine-1 ))); do
        send="$send\"${data[$i]}\","
    done
    
    # send="$send\"${data[$nbLine]}\"]}"
    send="$send\"${data[$nbLine]}\"],\"cable\":\"$cable\"}"
    
    echo $send
    # curl -d $send $serverUrl
    curl -H "Content-Type: application/json" -X POST -d "$send" $serverUrl
}

function examMode() {
    echo "exam mode"
}

function loop() {
    while [[ $choice != "n" ]]; do
        choice=""
        while [[ "A$choice" = "A" ]] || [[ $choice != "y" ]] && [[ $choice != "n" ]]; do
            read -p "Would you like to be evaluated (y/n) : " choice
        done
        if [[ $choice = "y" ]]; then
            evaluation
        else
            echo "Good bye"
        fi
    done
}

# installDep
downloadScript
verifDeamon
# input
getMarionetFile
loop
