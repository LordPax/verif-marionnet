#!/bin/bash

# distrib=$(lsb_release -i | cut -d : -f 2)
# export TEXTDOMAINDIR="/usr/share/locale/"
export TEXTDOMAIN="verifMario"
distrib=""

serverUrl="http://www-info.iutv.univ-paris13.fr/~gauthier/"
serverPOST="$serverUrl/eval.php" # url ou envoyer la requete
# serverPOST="http://192.168.1.24/server/eval.php"
# source="marioTestJson" # le dossier ou chercher les fichiers

packages="curl ssh jq yad"
projectName="exerciceTP.mar"
requestName="requetes.json"
idSsh="id_rsa_marionnet"
file="$projectName $requestName $idSsh"
prefixDir="exo"
timing=600 # temps en seconde
PARSER='OFS="\n" {print $1, $2, $3, $4; fflush()}'
LOGFILE=$(mktemp -u)
touch $LOGFILE

name=""
firstName=""
idExam=""
choice=""
back=0

declare -A dataRequest
declare data
declare -A cable

nbCable=0
nbLine=0

function helpFunc() {
    echo $"Usage : $0 [option]

Option :
--help ................ show help
--debug ............... debug mode
--text ................ text mode"
    exit 0
}

debug=0
graph=1
exam=$([ $0 == './examMario' ] && echo 1 || echo 0)
TMPDIR=$([ "A$TMPDIR" = "A" ] && echo /tmp || echo $TMPDIR)

# echo_debug <msg> [sortie]
function echo_debug() {
    if [ "A$1" != "A" ]; then
        local out=$([ "$2" = "err" ] && echo /dev/stderr || echo /dev/stdout) # sortir par défaut : stdout
        [ $debug -eq 1 ] && echo -e $1 > $out
    fi
}

# echo_err <msg>
function echo_err() {
    if [ "A$1" != "A" ]; then
        echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
    fi
}

if [ $# -ge 1 ]; then
    for i in $(seq 1 $#); do
        if [ "$1" == "--debug" ]; then debug=1
        elif [ "$1" == "--text" ]; then graph=0
        elif [ "$1" == "--help" ]; then helpFunc
        else
            echo_err $"Unknown parameter"
            exit 1
        fi
        shift
    done
fi

# marioSsh <machine> <cmd>
function marioSsh() {
    local cde=$0
    local PRIVATE_RSA_KEY=$idExam/$idSsh

    # we need more checks
    #-- Checks
    if [ "A$2" = "A" ]; then
        echo $"Usage: $cde  host cmd" > /dev/stderr
        echo_err $"Where host is the name of a virtual machine in marionnet"
        exit 1
    fi

    local Host="$1"
    shift
    Cmd="$*"

    resu=`ps aw |grep marionnet|grep "hostname=$Host "|head -1|sed -e 's/^.* eth42=\([^ ]*\) .*$/\1/'`'/'
    if [ "$resu" = "/" ] ; then
        echo_err $"Machine $Host not found in current marionnet project"
        exit 1
    fi

    local tap=`echo $resu | cut -d ',' -f 2`

    if [ "A$tap" = "A" ]; then
        echo_err $"Tap not found"
        exit 1
    fi

    local ip=`/sbin/route -n |grep $tap |cut -d ' ' -f 1`

    local pubKey=$(ssh-keyscan -t ecdsa $ip 2> /dev/null)
    local ref=$(cat ~/.ssh/known_hosts | grep $ip | cut -d ' ' -f 3)
    local search=$(echo $pubKey | cut -d ' ' -f 3)

    if [ "$search" != "$ref" ]; then
        echo $pubKey >> ~/.ssh/known_hosts
    fi

    ssh -xq -i $PRIVATE_RSA_KEY root@$ip $Cmd
    if [ $? -eq 255 ]; then
        echo_debug $"\e[31mERROR :\e[0m Ssh connection failed with $Host" err
    fi
}

# cidr2mask <cidr>
function cidr2mask() {
    if [ "A$1" != "A" ]; then
        set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
        [ $1 -gt 1 ] && shift $1 || shift
        echo ${1-0}.${2-0}.${3-0}.${4-0}
    fi
}

# testPresence <machine>
function testPresence() {
    if [ "A$1" != "A" ]; then
        local res=$(ps aw | grep marionnet | grep "$1" | head -1)
        [ "A$res" != "A" ] && echo ok
    fi
}

# getIPAddress <machine> [interface]
function getIPAddress() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        marioSsh $1 ip addr show $eth | grep 'net ' | awk '{print $2}' | cut -d '/' -f 1
    fi
}

# getMask <machine> [interface]
function getMask() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        cidr=$(marioSsh $1 ip addr show $eth | grep 'net ' | awk '{print $2}' | cut -d '/' -f 2)
        cidr2mask $cidr
    fi
}

# getRoute <machine> <route>
function getRoute() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        local route=$([ "$2" = "default" ] && echo '0.0.0.0' || echo $2)
        marioSsh $1 route -n | grep "^$route"
    fi
}

# getNet <machine> [interface]
function getNet() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        marioSsh $1 route -n | grep "U[^G] .* $eth$" | awk '{print $1}'
    fi
}

# pingMachine <machine1> <machine2> [interface]
function pingMachine() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        local eth=$([ "A$3" != "A" ] && echo $3 || echo eth0)
        local ip=$(getIPAddress $2 $eth)
        marioSsh $1 ping -c 1 -w 1 $ip &> /dev/null && echo ok
    fi
}

# getCable <machine1> <machine2>
function getCable() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        echo ${cable[$1,$2]}
    fi
}

# checkIP <machine> <net> [interface]
function checkIP() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        local eth=$([ "A$3" != "A" ] && echo $3 || echo eth0)
        local mask=$(getMask $1 $eth)
        local ip=$(getIPAddress $1 $eth)
        local net=$2
        local res=""
        local calc=""

        if [ "A$mask" != "A" ] && [ "A$ip" != "A" ]; then
            for i in {1..4}; do
                octMask=$(echo $mask | cut -d '.' -f $i)
                octIP=$(echo $ip | cut -d '.' -f $i)

                calc=$(($octMask & $octIP))
                res=$([ $i -eq 1 ] && echo $calc || echo "$res.$calc")
            done
        fi

        [ "$res" = "$net" ] && echo ok
    fi
}

function installDep() {
    echo_debug "Searching for dependance ..."
    for p in $packages; do
        res=$(command -v $p | wc -l)
        if [ $res -eq 1 ]; then
            echo_debug "Package $p found"
        else
            echo "Installing $p ..."
            sudo apt install $p
        fi
    done
}

function inputText() {
    if [ $exam -eq 1 ]; then
        while [ "A$firstName" = "A" ]; do
            read -p $"Enter your first name : " firstName
        done
        while [ "A$name" = "A" ]; do
            read -p $"Enter your name : " name
        done
    fi
    while [ "A$idExam" = "A" ]; do
        read -p $"Enter exercise name : " idExam
    done
}

function inputGraph() {
    if [ $exam -eq 1 ]; then
        local output=$(yad --form --title "input" \
        --field $"Enter your first name" \
        --field $"Enter your name" \
        --field $"Enter exercise name" \
        --button=envoyer:0 \
        --button=gtk-cancel:1 \
        --on-top)
    else
        local output=$(yad --form --title "input" \
        --field $"Enter exercise name" \
        --button=envoyer:0 \
        --button=gtk-cancel:1 \
        --on-top)
    fi
    
    if [ "A$output" != "A" ]; then
        if [ $exam -eq 1 ]; then
            if echo $output | grep -E ".+\|.+\|.+\|" &> /dev/null; then
                firstName=$(echo $output | cut -d '|' -f 1)
                name=$(echo $output | cut -d '|' -f 2)
                idExam=$(echo $output | cut -d '|' -f 3)
            else
                echo_err $"All field must be completed"
                inputGraph
            fi
        else
            if echo $output | grep -E ".+\|" &> /dev/null; then
                idExam=$(echo $output | cut -d '|' -f 1)
            else
                echo_err $"All field must be completed"
                inputGraph
            fi
        fi
    else
        exit 0
    fi
}

function verification() {
    local res=$(ps aux | grep marionnet | grep '\-daemon' | wc -l)
    if [ $res -eq 1 ]; then
        echo_debug $"Marionnet daemon is already running"
    else
        sudo /etc/init.d/marionnet-daemon start
        echo $"Marionnet daemon started"
    fi
}

function launchMarionnet() {
    if [ -f $idExam/$projectName ]; then
        res=$(ps aux | grep marionnet | grep $projectName | wc -l)
        if [ $res -eq 0 ]; then 
            marionnet $idExam/$projectName 2> /dev/null &
            echo $"Marionnet started"
        else
            echo_debug $"Marionnet already running"
        fi
    else
        echo_err $"Marionnet project $idExam/$projectName does not exist"
        exit 1
    fi
}

function getMarionetFile() {
    if [ ! -d $idExam ]; then
        mkdir $idExam
    fi

    for f in $file; do
        if [ ! -f $idExam/$f ]; then
            echo "Downloading $idExam/$f ..."
            curl -s $serverUrl/$idExam/$f -o $idExam/$f
            if grep '404 Not Found' $idExam/$f &> /dev/null; then
                rm -rf $idExam
                echo_err $"Id $idExam does not exist"
                exit 1
            fi
        else
            echo_debug $"$idExam/$f already exist"
        fi
    done

    if [ -f $idExam/$idSsh ]; then
        res=$(ls -l $idExam/$idSsh | cut -d ' ' -f 1)
        if [ $res != "-rw-------" ]; then
            echo_debug $"Change chmod right to 600"
            chmod 600 $idExam/$idSsh
        fi
    fi
}

function parseRequest() {
    echo_debug "Parsing request ..."
    nbLine=$(grep label $idExam/$requestName 2> /dev/null | wc -l)
    local l=0

    if [ $nbLine -eq 0 ]; then
        echo_err $"Request file does not exist or is empty"
        exit 1
    fi

    for i in $(seq 0 $((nbLine - 1))); do
        l=$((i+1))
        dataRequest[$l,1]=$(jq -r ".[$i].label" < $idExam/$requestName)
        dataRequest[$l,2]=$(jq -r ".[$i].command" < $idExam/$requestName)
    done

    [ $graph -eq 0 ] && echo $"$nbLine request found"
}

function parseCable() {
    # local pName=$(echo $projectName | cut -d . -f 1)
    local pName=$(ls $TMPDIR/marionnet-*.dir/ 2> /dev/null | grep -Ev "^(hub|hublet|sparse-swap|switch)-")
    local patternD='DIRECT CABLE EDGES'
    local patternC='CROSSOVER/SERIAL CABLE EDGES'
    local char=""
    local m1=""
    local m2=""
    local i=0

    if [ "A$pName" = "A" ]; then
        echo_err $"Project not found"
        exit 1
    fi
    
    echo_debug $"Parsing cable ..."

    while read line ; do
        if [ "$(echo $line)" == "$patternD" ]; then
            char='direct'
        elif [ "$(echo $line)" == "$patternC" ]; then
            char='cross'
        fi

        line=$(echo $line | grep ' -> ')
        if [ "A$line" != "A" ]; then
            line=$(echo $line | sed -e "s/^\([^(:| )]*\)[(:img:c)]* -> \([^(:| )]*\)[(:img:c)]* .*$/ \1 \2/")
            m1=$(echo $line | cut -d ' ' -f1)
            m2=$(echo $line | cut -d ' ' -f2)
            cable[$m1,$m2]=$char
            cable[$m2,$m1]=$char
        fi
    done < $TMPDIR/marionnet-*.dir/$pName/tmp/sketch.dot

    nbCable=$i
}

function formatJson() {
    send="{\"data\":["
    for i in $(seq 1 $(( nbLine-1 ))); do
        send="$send\"${data[$i]}\","
    done
    send="$send\"${data[$nbLine]}\"], \"examMode\":$exam, \"graph\":$graph, \"idExam\":\"$idExam\""
    if [ $exam -eq 1 ]; then
        send="$send, \"firstName\":\"$firstName\", \"name\":\"$name\"}"
    else
        send="$send}"
    fi
}

function getDataText() {
    local show=""
    for i in $(seq 1 $nbLine); do
        show=$"Getting data $i/$nbLine : ${dataRequest[$i,1]} ..."
        [ $debug -eq 0 ] && echo -en "$show \r" || echo $show

        data[$i]=$(${dataRequest[$i,2]}) # execute la commande

        # echo ${dataRequest[$i,1]}
        # echo ${dataRequest[$i,2]}
        # echo ${data[$i]}
    done
    echo "======================Result======================"
}

function getDataGraph() {
    local tmp=""
    for i in $(seq 1 $nbLine); do
        echo $"# Getting data $i/$nbLine : ${dataRequest[$i,1]} ..."
        echo $((100 * $i / $nbLine))
        echo $(${dataRequest[$i,2]}) >> $LOGFILE
    done | yad --progress --percentage=0 --auto-close --on-top --title $"Getting data"

    local i=1
    while read line ; do
        data[$i]=$line
        i=$((i + 1))
    done < $LOGFILE
    echo -n "" > $LOGFILE
}

function sendGraph() {
    if [ $exam -eq 1 ]; then
        curl -s -H "Content-Type: application/json" -X POST -d "$send" $serverPOST | awk -F ';' "$PARSER" |\
        yad --window-icon="gtk-execute" \
        --title="Vérif Marionnet exam"  \
        --button=gtk-close:1 \
        --geometry 600x350 --mouse \
        --list --no-click --no-selection \
        --text-align=center --text="Résultats" \
        --tail \
        --column CheckID:TXT \
        --column Note:TXT \
        --column Message:TXT \
        --column @back@
    else
        curl -s -H "Content-Type: application/json" -X POST -d "$send" $serverPOST | awk -F ';' "$PARSER" |\
        yad --window-icon="gtk-execute" \
        --title="Vérif Marionnet"  \
        --button=revérifier:0 \
        --button=gtk-close:1 \
        --geometry 600x350 --mouse \
        --list --no-click --no-selection \
        --text-align=center --text="Résultats" \
        --tail \
        --column CheckID:TXT \
        --column Note:TXT \
        --column Message:TXT \
        --column @back@
    fi

    back=$?
}

function evaluation() {
    [ $graph -eq 0 ] && echo $"Evaluation in progress ..."

    parseRequest
    parseCable
    [ $graph -eq 1 ] && getDataGraph || getDataText
    formatJson

    if [ $graph -eq 1 ]; then
        sendGraph
    else
        curl -H "Content-Type: application/json" -X POST -d "$send" $serverPOST
    fi
}

function normalModeText() {
    launchMarionnet

    while [ "$choice" != "n" ]; do
        choice=""
        while [ "A$choice" = "A" ] || [ "$choice" != "y" ] && [ "$choice" != "n" ]; do
            read -p $"Would you like to be evaluated (y/n) : " choice
        done
        if [ "$choice" = "y" ]; then
            res=$(ps aux | grep marionnet | grep $projectName | wc -l)
            if [ $res -eq 1 ]; then 
                evaluation
            else 
                echo_err $"Marionnet not launched"
                exit 1
            fi
        else
            echo $"Good bye"
        fi
    done
}

function normalModeGraph() {
    launchMarionnet

    yad --image dialog-question \
    --title Evaluation \
    --button=gtk-yes:0 \
    --button=gtk-no:1 \
    --text $"Would you like to be evaluated" \
    --on-top

    back=$?
    while [ $back -eq 0 ]; do
        res=$(ps aux | grep marionnet | grep $projectName | wc -l)
        if [ $res -eq 1 ]; then 
            evaluation
        else 
            echo_err $"Marionnet not launched"
            exit 1
        fi
    done
    echo $"Good bye"
}

function timerGraph() {
    local timer=0
    for sec in $(seq 0 $timing); do
        timer=$(date -d@$((timing - sec)) -u +%M:%S | awk -F : '{print $1, "min", $2, "s"}')
        echo "# $timer left ..."
        echo $((100 * sec / timing))
        sleep 1
    done | yad --progress --percentage=0 \
    --auto-close \
    --title Timer \
    --button "évaluer sans attendre:0"
}

function timerText() {
    local timer=0
    for sec in $(seq 0 $timing); do
        timer=$(date -d@$((timing - sec)) -u +%M:%S | awk -F : '{print $1, "min", $2, "s"}')
        echo -en "$timer left ...\r"
        sleep 1
    done
}

function examModeText() {
    launchMarionnet

    echo $"Your are in exam mode, you have $timing seconds ..."
    timerText

    evaluation
}

function examModeGraph() {
    launchMarionnet
    timerGraph
    evaluation
}

installDep
verification
[ $graph -eq 1 ] && inputGraph || inputText
getMarionetFile
if [ $exam -eq 1 ]; then
    [ $graph -eq 1 ] && examModeGraph || examModeText
else
    [ $graph -eq 1 ] && normalModeGraph || normalModeText
fi

rm -f $LOGFILE
