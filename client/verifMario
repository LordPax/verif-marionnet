#!/bin/bash

# distrib=$(lsb_release -i | cut -d : -f 2)
distrib=""

serverUrl="http://www-info.iutv.univ-paris13.fr/~gauthier/"
serverPOST="$serverUrl/eval.php" # url ou envoyer la requete
source="marioTestFile" # le dossier ou chercher les fichiers
# serverPOST="http://192.168.1.24/server/"

packages="zenity curl ssh"
projectName="example_TP1.mar"
requestName="exempleTP1_requetes.txt"
idSsh="id_rsa_marionnet"
# scripts="marionnet_getVar marionnet_list marionnet_ssh"
file="$projectName $requestName $idSsh"
timing=10 # temps en seconde

name=""
firstName=""
idExam=""
choice=""

declare -A dataRequest
declare data
declare cable

nbCable=0
nbLine=0

debug=$([ $# -eq 1 ] && [ "$1" == "--debug" ] && echo 1 || echo 0)
exam=$([ $0 == './examMario' ] && echo 1 || echo 0)
# exam=$(echo $0 | grep 'examMario' &> /dev/null && echo 1 || echo 0)

# marioSsh <machine> <cmd>
function marioSsh() {
    local cde=$0
    local PRIVATE_RSA_KEY=id_rsa_marionnet

    # we need more checks
    #-- Checks
    if [ "A$2" = "A" ]; then
        echo "Usage: $cde  host cmd"
        echo "where host is the name of a virtual machine in marionnet"
        exit 1
    fi

    if [ "A$TMPDIR" = "A" ]; then
        TMPDIR=/tmp
    fi

    local resu=`ls -d $TMPDIR/marionnet-*.dir 2> /dev/null`
    if [ "A$resu" = "A" ]; then
        echo "ERROR: No marionnet dir found in $TMPDIR, is it running ?"
        exit 1
    fi
    if [ `echo $resu | wc -l` -gt 1 ]; then
        echo "ERROR: more than one instance of marionnet detected, may be
        something wrong happened to some of them ?"
        echo "Please correct this first !"
        exit 1
    fi

    local Host="$1"
    shift
    Cmd="$*"

    resu=`ps aw |grep marionnet|grep "hostname=$Host "|head -1|sed -e 's/^.* eth42=\([^ ]*\) .*$/\1/'`'/'
    if [ "$resu" = "/" ] ; then
        echo "ERROR : machine $Host not found in current marionnet project"
        exit 1
    fi

    local tap=`echo $resu | cut -d ',' -f 2`

    if [ "A$tap" = "A" ]; then
        echo "ERROR: no tap found"
        exit 1
    fi

    local ip=`/sbin/route -n |grep $tap |cut -d ' ' -f 1`

    local pubKey=$(ssh-keyscan -t ecdsa $ip 2> /dev/null)
    local ref=$(cat ~/.ssh/known_hosts | grep $ip | cut -d ' ' -f 3)
    local search=$(echo $pubKey | cut -d ' ' -f 3)

    if [ "$search" != "$ref" ]; then
        echo $pubKey >> ~/.ssh/known_hosts
    fi

    ssh -xq -i $PRIVATE_RSA_KEY root@$ip $Cmd
}

# marioList <void>
function marioList() {
    local cde=$0

    #-- Checks

    if [ "A$TMPDIR" = "A" ]; then
        TMPDIR=/tmp
    fi

    local resu=`ls -d $TMPDIR/marionnet-*.dir 2> /dev/null`
    if [ "A$resu" = "A" ]; then
        echo "ERROR: No marionnet dir found in $TMPDIR, is it running ?"
        exit 1
    fi
    if [ `echo $resu | wc -l` -gt 1 ]; then
        echo "ERROR: more than one instance of marionnet detected, may be
        something wrong happened to some of them ?"
        echo "Please correct this first !"
        exit 1
    fi

    local projectDIR=$(ls -d $TMPDIR/marionnet-*.dir)
    cd $projectDIR
    local projectName=$(ls |egrep -v '^(hub|hublet|switch|sparse-swap)-')

    cat $projectDIR/$projectName/tmp/sketch.dot | grep '\w[^(edge)\[] \[' | awk '{print $1 " "}' | tr -d '\n'
}

# cidr2mask <cidr>
function cidr2mask() {
   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
   [ $1 -gt 1 ] && shift $1 || shift
   echo ${1-0}.${2-0}.${3-0}.${4-0}
}

# testPresence <machine>
function testPresence() {
    if [ "A$1" != "A" ]; then
        marioList | grep -o "$1" > /dev/null && echo ok
    fi
}

# getIPAddress <machine> [interface]
function getIPAddress() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        marioSsh $1 ip addr show $eth | grep 'net ' | awk '{print $2}' | cut -d / -f 1
    fi
}

# getMask <machine> [interface]
function getMask() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        cidr=$(marioSsh $1 ip addr show $eth | grep 'net ' | awk '{print $2}' | cut -d / -f 2)
        cidr2mask $cidr
    fi
}

# getRoute <machine> <route>
function getRoute() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        local route=$([ "$2" = "default" ] && echo '0.0.0.0' || echo $2)
        local count=$(marioSsh $1 route -n | grep "^$route" | wc -l)
        [ $count -eq 1 ] && marioSsh $1 route -n | grep "^$route"
    fi
}

# getNet <machine> [interface]
function getNet() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        marioSsh $1 route -n | grep "U[^G] .* $eth$" | awk '{print $1}'
    fi
}

# pingMachine <machine1> <machine2> [interface]
function pingMachine() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        local eth=$([ "A$3" != "A" ] && echo $3 || echo eth0)
        local ip=$(getIPAddress $2 $eth)
        marioSsh $1 ping -c 1 -w 1 $ip &> /dev/null && echo ok
    fi
}

# getCable <machine1> <machine2>
function getCable() {
    if [ "A$1" != "A" ] && [ "A$2" != "A" ]; then
        local cbl=""
        local res=""

        for i in $(seq 1 $nbCable); do
            res=$(echo ${cable[$i]} | grep "$1 $2")
            if [ "A$res" != "A" ]; then
                cbl=$res
            fi
        done

        echo $cbl
    fi
}

# checkIP <machine> [interface]
function checkIP() {
    if [ "A$1" != "A" ]; then
        local eth=$([ "A$2" != "A" ] && echo $2 || echo eth0)
        local mask=$(getMask $1 $eth)
        local ip=$(getIPAddress $1 $eth)
        local net=$(getNet $1 $eth)

        local octMask=$(echo $mask | cut -d . -f 1)
        local octIP=$(echo $ip | cut -d . -f 1)
        local res=$(($octMask & $octIP))

        for i in {2..4}; do
            octMask=$(echo $mask | cut -d . -f $i)
            octIP=$(echo $ip | cut -d . -f $i)
            res="$res.$(($octMask & $octIP))"
        done

        [ "$res" = "$net" ] && echo ok
    fi
}

function installDep() {
    [ $debug -eq 1 ] && echo "Searching for dependance ..."
    for p in $packages; do
        res=$(command -v $p | wc -l)
        if [ $res -eq 1 ]; then
            [ $debug -eq 1 ] && echo "Package $p found"
        else
            echo "Installing $p ..."
            sudo apt install $p
        fi
    done
}

function input() {
    while [ "A$firstName" = "A" ]; do
        read -p "Enter your first name : " firstName
    done
    while [ "A$name" = "A" ]; do
        read -p "Enter your name : " name
    done
    while [ "A$idExam" = "A" ]; do
        read -p "Enter your exam id : " idExam
    done
}

function verifDeamon() {
    res=$(ps aux | grep marionnet | grep daemon.native | wc -l)
    if [ $res -eq 1 ]; then
        [ $debug -eq 1 ] && echo "Marionnet daemon is already running"
    else
        sudo /etc/init.d/marionnet-daemon start
        echo "Marionnet daemon started"
    fi
}

function getMarionetFile() {
    for f in $file; do
        if [ ! -f $f ]; then
            echo "Downloading $f ..."
            curl -s $serverUrl/$source/$f -o $f
        else
            [ $debug -eq 1 ] && echo "$f already exist"
        fi
    done
    
    if [ -f $projectName ]; then
        res=$(ps aux | grep marionnet | grep $projectName | wc -l)
        if [ $res -eq 0 ]; then 
            marionnet $projectName 2> /dev/null &
            echo "Marionnet started"
        else
            [ $debug -eq 1 ] && echo "Marionnet already running"
        fi
    else
        echo "Marionnet project does not exist"
        exit 1
    fi
    
    if [ -f $idSsh ]; then
        res=$(ls -l $idSsh | cut -d ' ' -f 1)
        if [ $res != "-rw-------" ]; then
            [ $debug -eq 1 ] && echo "Change chmod to 600"
            chmod 600 $idSsh
        fi
    fi
}

function parseRequest() {
    echo "Parsing request ..."
    local i=0

    while read line; do
        if echo $line | grep '^[^#]' &> /dev/null; then
            i=$((i + 1))
            for j in {1..4}; do
                dataRequest[$i,$j]=$(echo $line | cut -d ';' -f $j)
            done
        fi
    done < $requestName

    nbLine=$i
    echo "$nbLine request found"
}

function parseCable() {
    local pName=$(echo $projectName | cut -d . -f 1)
    local seenD=0
    local seenC=0
    local patternD='DIRECT CABLE EDGES'
    local patternC='CROSSOVER/SERIAL CABLE EDGES'
    local char=""
    local i=0
    
    echo "Parsing cable ..."

    while read line ; do
        if [ "$(echo $line)" == "$patternD" ]; then
            seenD=1;seenC=0
        elif [ "$(echo $line)" == "$patternC" ]; then
            seenD=0;seenC=1
        fi

        if [ $seenD -eq 1 ]; then
            char='direct'
        elif [ $seenC -eq 1 ]; then
            char='cross'
        fi

        line=$(echo $line | grep '^[^:]*:img:c -> [^:]*:img:c')
        if [ "A$line" != "A" ]; then
            i=$((i + 1))
            cable[$i]=$(echo $line | sed -e "s/^\([^:]*\):img:c -> \([^:]*\):img:c .*\">\([^<]*\).*$/$char \3 \1 \2/")
            i=$((i + 1))
            cable[$i]=$(echo $line | sed -e "s/^\([^:]*\):img:c -> \([^:]*\):img:c .*\">\([^<]*\).*$/$char \3 \2 \1/")
        fi
    done < /tmp/marionnet-*.dir/$pName/tmp/sketch.dot

    nbCable=$i
}

function formatJson() {
    send="{\"data\":["
    for i in $(seq 1 $(( nbLine-1 ))); do
        send="$send\"${data[$i]}\","
    done
    send="$send\"${data[$nbLine]}\"], \"source\":\"$source\", \"examMode\":\"$exam\""

    if [ $exam -eq 1 ]; then
        send="$send, \"firstName\":\"$firstName\", \"name\":\"$name\", \"idExam\":\"$idExam\"}"
    else
        send="$send}"
    fi
}

function getData() {
    for i in $(seq 1 $nbLine); do
        # clear
        echo -en "Getting data $i/$nbLine : ${dataRequest[$i,1]} ...\r"
        data[$i]=$(${dataRequest[$i,2]}) # execute la commande

        # echo ${dataRequest[$i,2]}
        # echo ${data[$i]}
    done
    echo "======================Result======================"
}

function evaluation() {
    echo "Evaluation in progress ..."

    parseRequest
    parseCable
    getData
    formatJson

    curl -H "Content-Type: application/json" -X POST -d "$send" $serverPOST
}

function normalMode() {
    while [ "$choice" != "n" ]; do
        choice=""
        while [ "A$choice" = "A" ] || [ "$choice" != "y" ] && [ "$choice" != "n" ]; do
            read -p "Would you like to be evaluated (y/n) : " choice
        done
        if [ "$choice" = "y" ]; then
            res=$(ps aux | grep marionnet | grep $projectName | wc -l)
            if [ $res -eq 1 ]; then 
                evaluation
            else 
                echo "Marionnet not launch"
                exit 1
            fi
        else
            echo "Good bye"
        fi
    done
}

function timerGraph() {
    local percent=0
    for sec in $(seq 0 $timing); do
        echo "# $((timing - sec)) second"
        percent=$((100 * sec / timing))
        echo $percent
        sleep 1
    done | zenity --progress --percentage=0
}

function timerText() {
    for sec in $(seq 0 $timing); do
        clear
        echo "$((timing - sec)) second left ..."
        sleep 1
    done
}

function examMode() {
    input

    echo "Your are in exam mode, you have $timing seconds ..."
    timerText

    evaluation
}

installDep
verifDeamon
getMarionetFile
[ $exam -eq 1 ] && examMode || normalMode